
import { NextRequest, NextResponse } from 'next/server';
import { addTicket, getUserByEmail, addAutoGeneratedUser, getOrganizationById } from '@/lib/firestore';
import type { Ticket, User } from '@/lib/data';

export async function POST(request: NextRequest) {
  try {
    const formData = await request.formData();
    const name = formData.get('name') as string;
    const email = formData.get('email') as string;
    const subject = formData.get('subject') as string;
    const description = formData.get('description') as string;
    const organizationId = formData.get('organizationId') as string;

    if (!name || !email || !subject || !description || !organizationId) {
      return NextResponse.json({ error: 'Missing required form fields.' }, { status: 400 });
    }

    // Verify organization exists
    const organization = await getOrganizationById(organizationId);
    if (!organization) {
        return NextResponse.json({ error: 'Invalid Organization ID.' }, { status: 400 });
    }

    // Find or create the user
    let user = await getUserByEmail(email);

    if (!user) {
        const initials = name.split(' ').map(n => n[0]).join('').substring(0, 2).toUpperCase();
        const avatar = `https://placehold.co/32x32/A2E9C1/4A4A4A.png?text=${initials}`;
        
        const newUserData: Omit<User, 'id'> = {
            name,
            email,
            phone: '',
            role: 'Client',
            avatar,
            organizationId,
            status: 'active',
            activityIsPublic: false,
            createdByAdmin: false,
            country: '',
            city: '',
            zipCode: '',
            dob: '',
            gender: 'Prefer not to say',
        };
        
        const newUserId = await addAutoGeneratedUser(newUserData);
        user = { ...newUserData, id: newUserId };
        console.log(`Created new user ${user.name} from webform submission.`);
    }

    // Create the ticket
    const ticketData: Omit<Ticket, 'id' | 'createdAt' | 'updatedAt'> = {
      title: subject,
      description,
      reporter: user.name,
      reporterId: user.id,
      reporterEmail: user.email,
      tags: ['webform'],
      priority: 'Medium',
      category: 'General',
      assignee: 'Unassigned',
      project: null,
      source: 'General Inquiry', // Or a new 'Web Form' source if desired
      organizationId,
      statusLastSetBy: 'Client',
      priorityLastSetBy: 'System',
      status: 'New'
    };

    const newTicketId = await addTicket(ticketData);
    
    console.log(`Successfully created ticket ${newTicketId} from webform submission.`);

    // Redirect to a generic success page or the company's website
    const redirectUrl = new URL('/thank-you', request.url);
    return NextResponse.redirect(redirectUrl);

  } catch (error) {
    console.error('Error processing webform submission:', error);
    const errorMessage = error instanceof Error ? error.message : 'An unknown error occurred';
    // Redirect to a generic error page
    const errorUrl = new URL('/error', request.url);
    errorUrl.searchParams.set('message', 'Failed to submit your request. Please try again later.');
    return NextResponse.redirect(errorUrl);
  }
}
